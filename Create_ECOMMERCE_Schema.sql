-- Now switch to the ECOMMERCE schema to create the database objects
ALTER SESSION SET CURRENT_SCHEMA = ECOMMERCE;

-- CUSTOMER PROFILE TABLE
CREATE TABLE ECOMMERCE.CUSTOMER (
    CUSTOMER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    PHONE_NUMBER VARCHAR2(15),
    ADDRESS VARCHAR2(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- USER SESSION TABLE
CREATE TABLE ECOMMERCE.USER_SESSION (
    SESSION_ID VARCHAR2(50) PRIMARY KEY,
    CUSTOMER_ID NUMBER REFERENCES ECOMMERCE.CUSTOMER(CUSTOMER_ID),
    LOGIN_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LOGOUT_TIMESTAMP TIMESTAMP
);

-- PRODUCT INVENTORY TABLE
CREATE TABLE ECOMMERCE.PRODUCT (
    PRODUCT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    DESCRIPTION VARCHAR2(500),
    PRICE NUMBER(10, 2) NOT NULL,
    STOCK_QUANTITY NUMBER DEFAULT 0,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- SHOPPING CART TABLE
CREATE TABLE ECOMMERCE.SHOPPING_CART (
    CART_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CUSTOMER_ID NUMBER REFERENCES ECOMMERCE.CUSTOMER(CUSTOMER_ID),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    STATUS VARCHAR2(20) DEFAULT 'ACTIVE' -- Possible values: 'ACTIVE', 'CHECKED_OUT'
);

-- CART ITEMS TABLE (many-to-many relationship between SHOPPING_CART and PRODUCT)
CREATE TABLE ECOMMERCE.CART_ITEM (
    CART_ITEM_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CART_ID NUMBER REFERENCES ECOMMERCE.SHOPPING_CART(CART_ID) ON DELETE CASCADE,
    PRODUCT_ID NUMBER REFERENCES ECOMMERCE.PRODUCT(PRODUCT_ID) ON DELETE CASCADE,
    QUANTITY NUMBER NOT NULL CHECK (QUANTITY > 0),
    PRICE_AT_ADDITION NUMBER(10, 2) NOT NULL,
    ADDED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- TRANSACTION HISTORY TABLE
CREATE TABLE ECOMMERCE.TRANSACTION (
    TRANSACTION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CUSTOMER_ID NUMBER REFERENCES ECOMMERCE.CUSTOMER(CUSTOMER_ID),
    TOTAL_AMOUNT NUMBER(10, 2) NOT NULL,
    TRANSACTION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    STATUS VARCHAR2(20) DEFAULT 'PENDING' -- Possible values: 'PENDING', 'COMPLETED', 'FAILED'
);

-- TRANSACTION ITEMS TABLE (records items purchased in each transaction)
CREATE TABLE ECOMMERCE.TRANSACTION_ITEM (
    TRANSACTION_ITEM_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TRANSACTION_ID NUMBER REFERENCES ECOMMERCE.TRANSACTION(TRANSACTION_ID) ON DELETE CASCADE,
    PRODUCT_ID NUMBER REFERENCES ECOMMERCE.PRODUCT(PRODUCT_ID),
    QUANTITY NUMBER NOT NULL CHECK (QUANTITY > 0),
    ITEM_PRICE NUMBER(10, 2) NOT NULL
);

-- PAYMENT PROFILE TABLE
CREATE TABLE ECOMMERCE.PAYMENT_PROFILE (
    PAYMENT_PROFILE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CUSTOMER_ID NUMBER REFERENCES ECOMMERCE.CUSTOMER(CUSTOMER_ID),
    CARD_TYPE VARCHAR2(20),
    CARD_NUMBER VARCHAR2(20), -- Storing as text, but this should ideally be encrypted
    EXPIRY_DATE DATE,
    BILLING_ADDRESS VARCHAR2(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- PAYMENT HISTORY TABLE
CREATE TABLE ECOMMERCE.PAYMENT_HISTORY (
    PAYMENT_HISTORY_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TRANSACTION_ID NUMBER REFERENCES ECOMMERCE.TRANSACTION(TRANSACTION_ID),
    PAYMENT_PROFILE_ID NUMBER REFERENCES ECOMMERCE.PAYMENT_PROFILE(PAYMENT_PROFILE_ID),
    AMOUNT NUMBER(10, 2) NOT NULL,
    PAYMENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    STATUS VARCHAR2(20) DEFAULT 'SUCCESS' -- Possible values: 'SUCCESS', 'FAILED', 'REFUNDED'
);

-- INDEXES
CREATE INDEX ECOMMERCE.IDX_PRODUCT_NAME ON ECOMMERCE.PRODUCT(NAME);
CREATE INDEX ECOMMERCE.IDX_TRANSACTION_DATE ON ECOMMERCE.TRANSACTION(TRANSACTION_DATE);
CREATE INDEX ECOMMERCE.IDX_PAYMENT_HISTORY_DATE ON ECOMMERCE.PAYMENT_HISTORY(PAYMENT_DATE);

-- SEQUENCES (if Oracle version < 12c)
CREATE SEQUENCE ECOMMERCE.SEQ_CUSTOMER START WITH 1;
CREATE SEQUENCE ECOMMERCE.SEQ_PRODUCT START WITH 1;
CREATE SEQUENCE ECOMMERCE.SEQ_CART_ITEM START WITH 1;
CREATE SEQUENCE ECOMMERCE.SEQ_TRANSACTION START WITH 1;
CREATE SEQUENCE ECOMMERCE.SEQ_TRANSACTION_ITEM START WITH 1;
CREATE SEQUENCE ECOMMERCE.SEQ_PAYMENT_HISTORY START WITH 1;

